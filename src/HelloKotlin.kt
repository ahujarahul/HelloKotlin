import models.Person
import utils.*

/**
 * Created by rahulahuja on 15/09/17.
 */

// All variables, when declared, should be initialized in Kotlin else be declared as nullable data type
// or declared with 'lateinit' keyword

//This is a Kotlin function which will return void (Unit)
fun main(args : Array<String>) {
    println("===============================================================")
    print("print() does not have a new line character (\\n) at the end.")
    println("println() has a new line character (\\n) at the end.")

    println("===============================================================")
    //Variable declaration and assignment of value
    var string1 = "This is sample string variable."

    //declaring variable with data type explicitly
    var string2: String? = null
    string2 = "This is a nullable String"
    println("String2 : $string2")

    getStringDetails(string2)

    val string3 = "this is a final String variable and we cannot reassign value to this variable."
    //string3 = "reassign constant strings' value generates error"

    println("===============================================================")

    val name = "Rahul"
    displayName(name)

    val demoObj = Demo()
    demoObj.greet("Ray")

    val personObj = Person(name, 25, 50000.0, false)
    displayPersonInfo(personObj)

    println("===============================================================")
    //object creation and method calling
    val addObj = Addition()
    val addition = addObj.addTwoNumbers(50, 20)
    println("Addition is : $addition")

    //string interpolation
    val num1 = 20
    val num2 = 40
    println("Addition is --> ${num1 + num2}")

    println("===============================================================")
    //single expression function (function with single statement)
    fun multiply(x : Int) : Int = x.times(2)
    println("single expression function (function with single statement) --> ${multiply(5)}")


    println("===============================================================")
    //closure or function as a variable
    val multi: (Int) -> Int = ::multiply
    println("closure or function as a variable --> ${multi(3)}")

    //function as a parameter
    fun multiplyAsParam(operation: (Int) -> Int, x: Int){
        println("Function as Parameter --> ${operation(x)}")
    }
    multiplyAsParam(multi, 8)


    println("===============================================================")
    //Null safety
    var designation : String? = null
    println("Designation Count --> ${designation?.count()}")

    //Elvis operator --> ?:
    //it keyword --> it is the current object on which operation is going on
    designation?.let {
        println("Designation Count inside let --> ${it.count()}")
    } ?: println("Designation Count after Elvis --> 0")

    designation = "Manager"

    println("Designation is --> $designation")


    println("===============================================================")
    //Named Arguments
    val genericMethod = NamedArguments()
    genericMethod.build(title = "Rameez", height =  6, width = 2)
    genericMethod.build(height =  5, width = 1, title = "Rahul")


    val personName = "Ricky"
    val personObj2 = Person(personObj, personName)
    println("\nAnother Person object : "+ personObj2.toString())


    val findMax = FindMax(5 , 2)
    println("\nmax value : "+ findMax.getMax())

    println("===============================================================")
    val tellTime = TellTime()
    tellTime.getTime(1)

    println("===============================================================")
    val list = ArrayList<String>()
    list.add("Hello")
    list.add("from")
    list.add("the")
    list.add("world")
    list.add("of")
    list.add("Kotlin")
    list.add("Collections")

    iterateTheList(list)

    println("===============================================================")
    //print alternate numbers
    val intProgression : IntProgression = 1..10 step 2
    loopProgression(intProgression)

    println("===============================================================")
    //print range
    val intRange : IntRange = 1..5
    loopTheRange(intRange)

    println("===============================================================")
    val intReverse : IntProgression = 5 downTo  1
    loopProgression(intReverse)
}

/*
* data types in Kotlin :
* Boolean   1 bit
* Byte      8 bits
* Char      16 btis
* Short     16 bits
* Int       32 bits
* Long      64 bits
* Float     32 bits     for 50.0 to be float, we must say 50.0f
* Double    64 bits     by default : 50.0 is considered as Double
*
* all types have first letter in caps because in Kotlin, data types are class and variable becomes an object.
*/

/*
* run by clicking Kotlin icon beside main()
* Run > HelloKotlinKt
* 'HelloKotlinKt' is the class file which is generated by Kotlin as we have not written class in our program.
* This class file can be found in 'out' folder generated after compilation.
* on success, the code exits with exit code 0.
*/